import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import mongoose from 'mongoose';
import Migration from '../models/migration.model.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export const runMigrations = async () => {
    try {
        const migrationsDir = path.join(__dirname, 'files');

        // Ki·ªÉm tra n·∫øu th∆∞ m·ª•c migrations kh√¥ng t·ªìn t·∫°i
        if (!fs.existsSync(migrationsDir)) {
            console.log('üìÅ T·∫°o th∆∞ m·ª•c migrations...');
            fs.mkdirSync(migrationsDir, { recursive: true });
        }

        // L·∫•y danh s√°ch file migration
        const migrationFiles = fs
            .readdirSync(migrationsDir)
            .filter((file) => file.endsWith('.js'))
            .sort();

        if (migrationFiles.length === 0) {
            console.log('üìÇ Kh√¥ng c√≥ migration n√†o ƒë·ªÉ ch·∫°y');
            return;
        }

        // L·∫•y danh s√°ch migration ƒë√£ ch·∫°y
        const executedMigrations = await Migration.find({}).sort({ batch: 1 });
        const executedFilenames = executedMigrations.map((m) => m.filename);

        // L·ªçc ra c√°c migration ch∆∞a ch·∫°y
        const pendingMigrations = migrationFiles.filter(
            (file) => !executedFilenames.includes(file)
        );

        if (pendingMigrations.length === 0) {
            console.log('‚úÖ T·∫•t c·∫£ migrations ƒë√£ ƒë∆∞·ª£c ch·∫°y');
            return;
        }

        // L·∫•y batch number ti·∫øp theo
        const lastMigration = await Migration.findOne({}).sort({ batch: -1 });
        const nextBatch = lastMigration ? lastMigration.batch + 1 : 1;

        console.log(`üöÄ Ch·∫°y ${pendingMigrations.length} migration(s)...`);

        // Ch·∫°y t·ª´ng migration
        for (const filename of pendingMigrations) {
            const migrationPath = path.join(migrationsDir, filename);
            console.log(`‚è≥ ƒêang ch·∫°y: ${filename}`);

            try {
                const migration = await import(`file://${migrationPath}`);

                if (typeof migration.up === 'function') {
                    await migration.up();

                    // L∆∞u record migration
                    await Migration.create({
                        filename,
                        batch: nextBatch,
                    });

                    console.log(`‚úÖ Ho√†n th√†nh: ${filename}`);
                } else {
                    console.log(`‚ö†Ô∏è  Migration ${filename} kh√¥ng c√≥ h√†m up()`);
                }
            } catch (error) {
                console.error(
                    `‚ùå L·ªói khi ch·∫°y migration ${filename}:`,
                    error.message
                );
                throw error;
            }
        }

        console.log('üéâ T·∫•t c·∫£ migrations ƒë√£ ƒë∆∞·ª£c ch·∫°y th√†nh c√¥ng!');
    } catch (error) {
        console.error('‚ùå L·ªói khi ch·∫°y migrations:', error.message);
        throw error;
    }
};

export const rollbackMigration = async () => {
    try {
        // L·∫•y migration cu·ªëi c√πng
        const lastMigration = await Migration.findOne({}).sort({ batch: -1 });

        if (!lastMigration) {
            console.log('üìÇ Kh√¥ng c√≥ migration n√†o ƒë·ªÉ rollback');
            return;
        }

        // L·∫•y t·∫•t c·∫£ migration trong batch cu·ªëi c√πng
        const migrationsToRollback = await Migration.find({
            batch: lastMigration.batch,
        }).sort({ executedAt: -1 });

        console.log(
            `üîÑ Rollback ${migrationsToRollback.length} migration(s) t·ª´ batch ${lastMigration.batch}...`
        );

        const migrationsDir = path.join(__dirname, 'files');

        // Rollback t·ª´ng migration theo th·ª© t·ª± ng∆∞·ª£c l·∫°i
        for (const migrationRecord of migrationsToRollback) {
            const migrationPath = path.join(
                migrationsDir,
                migrationRecord.filename
            );
            console.log(`‚è≥ ƒêang rollback: ${migrationRecord.filename}`);

            try {
                if (fs.existsSync(migrationPath)) {
                    const migration = await import(
                        `file://${migrationPath}?t=${Date.now()}`
                    );

                    if (typeof migration.down === 'function') {
                        await migration.down();

                        // X√≥a record migration
                        await Migration.deleteOne({ _id: migrationRecord._id });

                        console.log(
                            `‚úÖ Rollback ho√†n th√†nh: ${migrationRecord.filename}`
                        );
                    } else {
                        console.log(
                            `‚ö†Ô∏è  Migration ${migrationRecord.filename} kh√¥ng c√≥ h√†m down()`
                        );
                    }
                } else {
                    console.log(
                        `‚ö†Ô∏è  File migration ${migrationRecord.filename} kh√¥ng t·ªìn t·∫°i`
                    );
                    // V·∫´n x√≥a record n·∫øu file kh√¥ng t·ªìn t·∫°i
                    await Migration.deleteOne({ _id: migrationRecord._id });
                }
            } catch (error) {
                console.error(
                    `‚ùå L·ªói khi rollback migration ${migrationRecord.filename}:`,
                    error.message
                );
                throw error;
            }
        }

        console.log('üéâ Rollback th√†nh c√¥ng!');
    } catch (error) {
        console.error('‚ùå L·ªói khi rollback:', error.message);
        throw error;
    }
};

export const getMigrationStatus = async () => {
    try {
        const migrationsDir = path.join(__dirname, 'files');

        // L·∫•y danh s√°ch file migration
        const migrationFiles = fs.existsSync(migrationsDir)
            ? fs
                  .readdirSync(migrationsDir)
                  .filter((file) => file.endsWith('.js'))
                  .sort()
            : [];

        // L·∫•y danh s√°ch migration ƒë√£ ch·∫°y
        const executedMigrations = await Migration.find({}).sort({
            batch: 1,
            executedAt: 1,
        });
        const executedFilenames = executedMigrations.map((m) => m.filename);

        const status = migrationFiles.map((filename) => ({
            filename,
            status: executedFilenames.includes(filename)
                ? 'executed'
                : 'pending',
            batch:
                executedMigrations.find((m) => m.filename === filename)
                    ?.batch || null,
            executedAt:
                executedMigrations.find((m) => m.filename === filename)
                    ?.executedAt || null,
        }));

        return {
            total: migrationFiles.length,
            executed: executedFilenames.length,
            pending: migrationFiles.length - executedFilenames.length,
            migrations: status,
        };
    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y tr·∫°ng th√°i migration:', error.message);
        throw error;
    }
};

export const resetDatabase = async () => {
    try {
        console.log('üîÑ ƒêang reset database...');

        // Drop collections
        const collections = ['products', 'users', 'carts', 'migrations'];
        for (const col of collections) {
            try {
                await mongoose.connection.db.dropCollection(col);
                console.log(`‚úÖ Dropped collection: ${col}`);
            } catch (e) {
                console.log(`‚ö†Ô∏è Collection ${col} kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói: ${e.message}`);
            }
        }

        // Ch·∫°y migrations
        await runMigrations();

        console.log('üéâ Reset database th√†nh c√¥ng!');
    } catch (error) {
        console.error('‚ùå L·ªói khi reset database:', error.message);
        throw error;
    }
};
